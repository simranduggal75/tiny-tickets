generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  MEMBER
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  name         String
  createdAt    DateTime @default(now())
  projects     Project[] @relation("ProjectOwner")
  memberships  ProjectMember[]
  tickets      Ticket[] @relation("AssignedTickets")
  comments     Comment[]
}

model Project {
  id          String         @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime       @default(now())
  owner       User           @relation("ProjectOwner", fields: [ownerId], references: [id])
  ownerId     String
  members     ProjectMember[]
  tickets     Ticket[]
  labels      Label[]
}

model ProjectMember {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  role      Role
  addedAt   DateTime @default(now())

  @@unique([userId, projectId])
}

model Ticket {
  id          String         @id @default(cuid())
  project     Project        @relation(fields: [projectId], references: [id])
  projectId   String
  title       String
  description String?
  status      TicketStatus   @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  assignee    User?          @relation("AssignedTickets", fields: [assigneeId], references: [id])
  assigneeId  String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  comments    Comment[]
  labels      TicketLabel[]
}

model Comment {
  id        String   @id @default(cuid())
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  body      String
  createdAt DateTime @default(now())
}

model Label {
  id        String   @id @default(cuid())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  name      String
  tickets   TicketLabel[]

  @@unique([projectId, name])
}

model TicketLabel {
  ticket   Ticket @relation(fields: [ticketId], references: [id])
  ticketId String
  label    Label  @relation(fields: [labelId], references: [id])
  labelId  String

  @@id([ticketId, labelId])
}
